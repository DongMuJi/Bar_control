#include "ros/ros.h"
#include "stdlib.h"
#include "math.h"
#include "std_msgs/String.h"
#include "geometry_msgs/Twist.h"
#include "serial_msgs/serial.h"
#include <serial/serial.h>
#include <std_msgs/Empty.h>

#define sBUFFERSIZE     30
unsigned char s_buffer[sBUFFERSIZE];
unsigned char data[9];
unsigned char Fdata[8];
unsigned char Fdata1[4];
unsigned char Fdata2[4];
serial::Serial ser;
geometry_msgs::Twist cmd_vel;
int count=0;
int flag=0;
float max_linear= 1.0;

unsigned char addCheck(unsigned char *Cdata)
{
    unsigned char i,sum=0;
    for(i=0;i<8;i++)
    sum+=Cdata[i];
    sum = sum+0xAB;
    sum = sum+0xCD;
    return sum;
}

struct Force
{
    float force;
    float theta;
};

float speedChange(float a,float b)
{
    
    float k,c,speed;
    if(b>=0)
    {
        k=max_linear/9950;
        c=-50*k;
        speed = a*k+c;
    }
    else if(b<0)
    {
        k=max_linear/9950;
        c=50*k;
        speed = a*k+c;
    }
    return speed;
    
}

void floatToSpeed(float a,float b)
{
    if(abs(a)<=50)
    {
        cmd_vel.linear.x = 0;
        cmd_vel.linear.y = 0;
        cmd_vel.linear.z = 0;
        cmd_vel.angular.x = 0;
        cmd_vel.angular.y = 0;
        cmd_vel.angular.z = 0;
    }
    else if(a>50 && b<0)
    {
        cmd_vel.linear.x=0.2;
        cmd_vel.angular.z=-0.2;
    }
    else if(a>50 && b>0)
    {
        cmd_vel.linear.x=0.2;
        cmd_vel.angular.z=0.2;
    }
    else if(a>50 && b==0)
    {
        cmd_vel.linear.x = speedChange(a,b);
        cmd_vel.angular.z = 0;
    }
    else if(a<-50)
    {
        cmd_vel.linear.x= speedChange(a,b);
        cmd_vel.angular.z=0;
    }
}

struct Force charToFloat(unsigned char *Ddata)
{
    int ccount=0;
    struct Force F;
    for(int i=0;i<4;i++)
    Fdata1[i] = Ddata[i];
    for(int i=4;i<8;i++)
    {
        if(ccount<4)
        {
            Fdata2[ccount]=Ddata[i];
            ccount++;
        }
        else
        ccount = 0;
    }
    F.force = *(float*)(&Fdata1);
    F.theta = *(float*)(&Fdata2);
    //ROS_INFO("force1:[%1f]",F.force);
    ROS_INFO("force2:[%1f]",F.theta);
    return F;
}


void chatterCallback(const serial_msgs::serial& msg)
{
    float force_data,theta_data;    
    for(int i=0;i<msg.serial.size();++i)
    {
     s_buffer[i]=msg.serial[i];
     if(s_buffer[i]==0xAB && flag == 0)
         flag = 1;
         else if(s_buffer[i]==0xCD && flag == 1)
         flag = 2;
         else if(flag == 2)
         {
             data[count] = s_buffer[i];
             count++;
             if(count == 9)
             {
                 count = 0;
		         flag = 0;
                 if(data[8]==addCheck(data))
                 {
                     	for(int n=0;n<8;n++)
		    	        {       
                     		Fdata[n]=data[n];
			            }

                        charToFloat(Fdata);
                 }
                 
             }
         }
         else
         flag = 0;         
     }
        
}


int main(int argc, char **argv)
{
    ros::init(argc, argv, "Bar_data_deal");
    ros::NodeHandle n;   
    ros::Subscriber sub = n.subscribe("listen_from_serial", 1000, chatterCallback);
    ros::Publisher pub = n.advertise<geometry_msgs::Twist>("cmd/vel", 1000);
    ros::Rate loop_rate(50);
    pub.publish(cmd_vel);
    loop_rate.sleep();
    ros::spin();
    return 0;
}

